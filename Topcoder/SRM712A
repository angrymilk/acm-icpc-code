//XJB找规律注意左右移动总次数和分别移动的关系
#line 5 "LR.cpp"
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <ctime>
using namespace std;
typedef long long LL;
#define clr(x,a) memset(x,a,sizeof(x))
#define sz(x) (int)x.size()
#define see(x) cerr<<#x<<" "<<x<<endl
#define se(x) cerr<<" "<<x
#define pb push_back
#define mp make_pair
int x=0,y=0,len;
LL o[200],p[200];
bool cmp()
{
    for(int j=0; j<len; j++)
    {
        bool f=false;
        for(int k=0; k<len; k++)
        {
            if(o[(j+k)%len]!=p[k])
            {
                f=true;
                break;
            }
        }
        if(!f)
            return true;
    }
    return false;
}
bool cmp2()
{
    bool f=false;
    for(int k=0; k<len; k++)
    {
        if(o[k]!=p[k])
        {
            f=true;
            break;
        }
    }
    if(!f)
        return true;
    return false;
}
int n,m;
class LR
{
public:
    string construct(vector<long long> s, vector<long long> t)
    {
        len=s.size();
        for(int i=0; i<s.size(); i++)
            o[i]=s[i],p[i]=t[i];
        int sum=-1;
        bool f=false;
        for(int i=1; i<=55; i++)
        {
            if(cmp())
            {
                sum=i-1;
                break;
            }
            LL u=o[0];
            bool ff=false;
            for(int j=0; j<len-1; j++)
            {
                o[j]=o[j+1]+o[j];
                if(o[j]>1000000000000000)
                {
                    ff=true;
                    break;
                }
            }
            if(ff)
                break;
            o[len-1]=o[len-1]+u;
        }
        if(sum==-1)
        {
            string ss="No solution";
            return ss;
        }
        bool pp=false;
        for(int i=0; i<=sum; i++)
        {
            int j=sum-i;
            for(int l=0; l<s.size(); l++)
                o[l]=s[l],p[l]=t[l];
            for(int op=1; op<=i; op++)
            {
                o[len]=o[0];
                for(int jj=0; jj<len; jj++)
                {
                    o[jj]=o[jj+1]+o[jj];
                }
            }
            for(int op=1; op<=j; op++)
            {
                LL u=o[len-1];
                for(int jj=len-1; jj>=1; jj--)
                {
                    o[jj]=o[jj]+o[jj-1];
                }
                o[0]=o[0]+u;
            }
            if(cmp2())
            {
                x=i,y=j;
                pp=true;
            }
        }
        if(pp)
        {
            string ss;
            for(int i=1; i<=x; i++)
                ss+='R';
            for(int j=1; j<=y; j++)
                ss+='L';
            return ss;
        }
        else
        {
            string ss="No solution";
            return ss;
        }
    }

// BEGIN CUT HERE
public:
    void run_test(int Case)
    {
        if ((Case == -1) || (Case == 0)) test_case_0();
        if ((Case == -1) || (Case == 1)) test_case_1();
        if ((Case == -1) || (Case == 2)) test_case_2();
        if ((Case == -1) || (Case == 3)) test_case_3();
        if ((Case == -1) || (Case == 4)) test_case_4();
        if ((Case == -1) || (Case == 5)) test_case_5();
        if ((Case == -1) || (Case == 6)) test_case_6();
    }
private:
    template <typename T> string print_array(const vector<T> &V)
    {
        ostringstream os;
        os << "{ ";
        for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\",";
        os << " }";
        return os.str();
    }
    void verify_case(int Case, const string &Expected, const string &Received)
    {
        cerr << "Test Case #" << Case << "...";
        if (Expected == Received) cerr << "PASSED" << endl;
        else
        {
            cerr << "FAILED" << endl;
            cerr << "\tExpected: \"" << Expected << '\"' << endl;
            cerr << "\tReceived: \"" << Received << '\"' << endl;
        }
    }
    void test_case_0()
    {
        long Arr0[] = {0,1,0,0,0};
        vector<long long> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0])));
        long Arr1[] = {0,1,2,1,0};
        vector<long long> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0])));
        string Arg2 = "LL";
        verify_case(0, Arg2, construct(Arg0, Arg1));
    }
    void test_case_1()
    {
        long Arr0[] = {0,0,0,1};
        vector<long long> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0])));
        long Arr1[] = {0,1,0,0};
        vector<long long> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0])));
        string Arg2 = "No solution";
        verify_case(1, Arg2, construct(Arg0, Arg1));
    }
    void test_case_2()
    {
        long Arr0[] = {1,2,3,4,5,6,7,8,9,10};
        vector<long long> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0])));
        long Arr1[] = {12,24,56,95,12,78,0,100,54,88};
        vector<long long> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0])));
        string Arg2 = "No solution";
        verify_case(2, Arg2, construct(Arg0, Arg1));
    }
    void test_case_3()
    {
        long Arr0[] = {1,0,0};
        vector<long long> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0])));
        long Arr1[] = {11,11,10};
        vector<long long> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0])));
        string Arg2 = "RRRRR";
        verify_case(3, Arg2, construct(Arg0, Arg1));
    }
    void test_case_4()
    {
        long Arr0[] = {1,1};
        vector<long long> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0])));
        long Arr1[] = {562949953421312,562949953421312};
        vector<long long> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0])));
        string Arg2 = "RLLLRRRLLRRRLRLRRLLLLRLLRRLRRRLRRLRRLLRRRLLRRRLLL";
        verify_case(4, Arg2, construct(Arg0, Arg1));
    }
    void test_case_5()
    {
        long Arr0[] = {0,0,0,0,0};
        vector<long long> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0])));
        long Arr1[] = {0,0,0,1,0};
        vector<long long> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0])));
        string Arg2 = "No solution";
        verify_case(5, Arg2, construct(Arg0, Arg1));
    }
    void test_case_6()
    {
        long Arr0[] = {123,456};
        vector<long long> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0])));
        long Arr1[] = {123,456};
        vector<long long> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0])));
        string Arg2 = "";
        verify_case(6, Arg2, construct(Arg0, Arg1));
    }
// END CUT HERE

};
// BEGIN CUT HERE
int main()
{
    LR ___test;
    ___test.run_test(-1);
    return 0;
}
// END CUT HERE
