// BEGIN CUT HERE

// END CUT HERE
#line 5 "DFSCount.cpp"
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <ctime>
using namespace std;
typedef long long ll;
#define clr(x,a) memset(x,a,sizeof(x))
#define sz(x) (int)x.size()
#define see(x) cerr<<#x<<" "<<x<<endl
#define se(x) cerr<<" "<<x
#define pb push_back
#define mp make_pair
#define maxn 14
int go[maxn][maxn];
ll dp[maxn][1<<14];
int masks[maxn][1<<maxn];
int n,m;
ll get(int v,int mask)
{
    //printf("mask=%d v=%d\n",mask,v);
    auto &res=dp[v][mask];
    if(res!=-1)
        return res;
    res=0;
    mask|=(1<<v);
    int cnt=0;
    for(int u=0;u<n;u++)
    {
        if(!go[v][u]||(mask&(1<<u)))
            continue;
        ++cnt;
        res+=get(u,mask)*get(v,masks[u][mask]);
    }
    if(!cnt)
        res=1;
    return res;
}

class DFSCount
{
public:
    long long count(vector <string> G)
    {
        n=G.size();
        for(int u=0; u<n; u++)
        {
            for(int j=0; j<n; j++)
                go[u][j]=(G[u][j]=='Y');
        }
        memset(dp,-1,sizeof(dp));
        for(int mask=(1<<n)-1; mask>=0; --mask)
        {
            for(int v=0; v<n; ++v)
            {
                auto &res=masks[v][mask];
                res=(mask|(1<<v));
                for(int u=0; u<n; ++u)
                {
                    if(go[v][u]&&!(res&(1<<u)))
                        res|=masks[u][res];
                }
            }
        }
        ll res=0;
        for(int v=0;v<n;++v)
            res+=get(v,0);
        return res;
    }

// BEGIN CUT HERE
public:
    void run_test(int Case)
    {
        if ((Case == -1) || (Case == 0)) test_case_0();
        if ((Case == -1) || (Case == 1)) test_case_1();
        if ((Case == -1) || (Case == 2)) test_case_2();
        if ((Case == -1) || (Case == 3)) test_case_3();
        if ((Case == -1) || (Case == 4)) test_case_4();
    }
private:
    template <typename T> string print_array(const vector<T> &V)
    {
        ostringstream os;
        os << "{ ";
        for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\",";
        os << " }";
        return os.str();
    }
    void verify_case(int Case, const long long &Expected, const long long &Received)
    {
        cerr << "Test Case #" << Case << "...";
        if (Expected == Received) cerr << "PASSED" << endl;
        else
        {
            cerr << "FAILED" << endl;
            cerr << "\tExpected: \"" << Expected << '\"' << endl;
            cerr << "\tReceived: \"" << Received << '\"' << endl;
        }
    }
    void test_case_0()
    {
        string Arr0[] = {"NYY",
                         "YNY",
                         "YYN"
                        };
        vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0])));
        long long Arg1 = 6LL;
        verify_case(0, Arg1, count(Arg0));
    }
    void test_case_1()
    {
        string Arr0[] = {"NYNN",
                         "YNYN",
                         "NYNY",
                         "NNYN"
                        }
                        ;
        vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0])));
        long long Arg1 = 6LL;
        verify_case(1, Arg1, count(Arg0));
    }
    void test_case_2()
    {
        string Arr0[] = {"NYNNNNN",
                         "YNYNNNN",
                         "NYNYNYN",
                         "NNYNYNN",
                         "NNNYNNN",
                         "NNYNNNY",
                         "NNNNNYN",
                        }
                        ;
        vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0])));
        long long Arg1 = 16LL;
        verify_case(2, Arg1, count(Arg0));
    }
    void test_case_3()
    {
        string Arr0[] = {"NYYYYYYYYYYYYY",
                         "YNYYYYYYYYYYYY",
                         "YYNYYYYYYYYYYY",
                         "YYYNYYYYYYYYYY",
                         "YYYYNYYYYYYYYY",
                         "YYYYYNYYYYYYYY",
                         "YYYYYYNYYYYYYY",
                         "YYYYYYYNYYYYYY",
                         "YYYYYYYYNYYYYY",
                         "YYYYYYYYYNYYYY",
                         "YYYYYYYYYYNYYY",
                         "YYYYYYYYYYYNYY",
                         "YYYYYYYYYYYYNY",
                         "YYYYYYYYYYYYYN"
                        };
        vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0])));
        long long Arg1 = 87178291200LL;
        verify_case(3, Arg1, count(Arg0));
    }
    void test_case_4()
    {
        string Arr0[] = {"N"};
        vector <string> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0])));
        long long Arg1 = 1LL;
        verify_case(4, Arg1, count(Arg0));
    }

// END CUT HERE

};
// BEGIN CUT HERE
int main()
{
    DFSCount ___test;
    ___test.run_test(-1);
    return 0;
}
// END CUT HERE
