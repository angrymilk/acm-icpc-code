#include <iostream>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <algorithm>
#include <queue>
#include <cmath>
#include <map>
#define eps 0.0000000001
#define maxn 1009
#define inf 0x3f3f3f3f
#define mod 1000000009
#define LL long long
using namespace std;
LL dp[maxn][maxn];
LL n,m,a[maxn],c[maxn][maxn],suf[maxn],d[maxn][maxn];
int main()
{
    //freopen("d:\\in.txt","r",stdin);
    while(scanf("%lld%lld",&n,&m))
    {
        if(!n&&!m)
            break;
        for(int i=1; i<=n; i++)
            scanf("%lld",&a[i]);
        memset(dp,inf,sizeof(dp));
        suf[0]=0;
        for(int i=1; i<=n; i++)
            c[i][i]=0,suf[i]=suf[i-1]+a[i];
        for(int i=1; i<=n; i++)
            for(int j=i+1; j<=n; j++)
                c[i][j]=c[i][j-1]+(suf[j-1]-suf[i-1])*a[j];
        for(int i=1; i<=n; i++)
            d[1][i]=0,dp[1][i]=c[1][i];//注意这里的d[1][i]等于0还是1
        //决策点：d[i][j-1]<=d[i][j]<=d[i+1][j]
        //这里运用了: d[i-1][j]<=d[i][j]<=d[i][j+1]
        //满足条件：四边形和区域覆盖条件
        for(int i=2; i<=m+1; i++)
        {
            d[i][n+1]=n;
            for(int j=n; j>=i; j--)
            {
                for(int k=d[i-1][j]; k<=d[i][j+1]; k++)
                {
                    if(dp[i-1][k]+c[k+1][j]<dp[i][j])
                        d[i][j]=k,dp[i][j]=dp[i-1][k]+c[k+1][j];
                }
            }
        }
        printf("%lld\n",dp[m+1][n]);
    }
    return 0;
}
