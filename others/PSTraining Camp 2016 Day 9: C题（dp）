//这题我感觉要注意的是从前面的影响去推后面必定会发生的影响，当然第一步的贪心也是十分巧妙地。
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <algorithm>
#include <queue>
#include <cmath>
#include <map>
#define eps 0.0000000001
#define maxn 1009
#define maxm 100009
#define inf 0x3f3f3f3f
#define mod 1000000009
#define ll long long
using namespace std;
ll dp[2][maxm],sum[maxn],p[maxn];
ll n,m;
int main()
{
    //freopen("d:\\in.txt","r",stdin);
    scanf("%lld%lld",&n,&m);
    for(int i=1;i<=m;i++)
    {
        scanf("%lld",&p[i]);
        p[i]=-p[i];
    }
    sort(p+1,p+n+1);
    ll s=0;
    for(int i=1;i<=m;i++)
    {
        p[i]=-p[i];
        s+=p[i];
        sum[i]+=sum[i-1]+p[i];
    }
    int cur=1;
    memset(dp,-inf,sizeof(dp));
    dp[cur][p[1]]=(s-p[1])*p[1];
    dp[cur][0]=(s-p[1])*p[1];
    for(int i=2;i<=m;i++)
    {
        int t=cur^1;
        for(int j=0;j<maxm-4;j++)
        {
            ll t1=j*(n-i)*p[i];
            ll t2=(sum[i]-j)*(s-sum[i]);
            dp[t][j]=max(dp[t][j],dp[cur][j]+t1+t2);
            if(j>=p[i])
            {
                ll y=j-p[i];
                ll x=j*(s-sum[i]);
                ll z=p[i]*(n-i)*(sum[i]-j);
                dp[t][j]=max(dp[t][j],dp[cur][y]+x+z);
            }
        }
        memset(dp[cur],-inf,sizeof(dp[cur]));
        cur^=1;
    }
    ll ans=0;
    for(int i=0;i<maxm-6;i++)
    {
        ans=max(ans,dp[cur][i]);
    }
    printf("%lld\n",ans);
    return 0;
}

