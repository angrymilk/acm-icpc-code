#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>  
using namespace __gnu_pbds;
using namespace std;
inline int read(){int x=0,f=1;char ch=getchar();while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}return x*f;}
const int maxn = 1e5 + 50;
#define lowbit(x) ((x)&(-x))
struct Node{
	int x , y , z ;
	Node( int x = 0 , int y = 0 , int z = 0 ) : x(x) , y(y) , z(z){}
};
template < class Node_CItr , class Node_Itr , class Cmp_Fn , class _Alloc>
struct MyUpdate{
	virtual Node_CItr node_begin() const = 0;
	virtual Node_CItr node_end() const = 0;
	typedef int metadata_type;
	inline void operator()(Node_Itr it , Node_CItr end_it){
		Node_Itr l = it.get_l_child(), r = it.get_r_child();
		int res = 0;
		if(l != end_it) res = max( res , l.get_metadata());
		if(r != end_it) res = max( res , r.get_metadata());
		const_cast <metadata_type &>(it.get_metadata()) = max( res , (*it)->second );
	}
	inline int PrefixMax( int x ){
		int ret = 0;
		Node_CItr it = node_begin();
		while( it != node_end() ){
			Node_CItr l = it.get_l_child() , r = it.get_r_child();
			if(Cmp_Fn()(x,(*it)->first)) it=l;
			else{
				ret = max( ret , (*it)->second );
				if( l != node_end() ) ret = max( ret , l.get_metadata() );
				it = r;
			}
		}
		return ret;
	}
};
tree < int , int , less < int > , rb_tree_tag , MyUpdate > rbt[maxn];
int n , D , w[maxn] , del[maxn] , C , rk[maxn] , Mi , Root , sz[maxn] , sizeall , quelen , ans = 1;
Node tque[maxn];
vector < int > G[maxn] , vi;
queue < int > que;

void PreDFS( int u , int fa = 0 ){
	vi.emplace_back( w[u] );
	sz[u] = 1;
	for(auto v : G[u]){
		if( v == fa || del[v] )
			continue;
		PreDFS( v , u );
		sz[u] += sz[v];
	}
}

void FindRoot( int u , int fa = 0 ){
	rk[u] = lower_bound( vi.begin() , vi.begin() + C , w[u] ) - vi.begin() + 1;
	int g = sizeall - sz[u];
	for(auto v : G[u]){
		if( v == fa || del[v] )
			continue;
		FindRoot( v , u );
		g = max( g , sz[v] );
	}
	if( g < Mi )
		Mi = g , Root = u;
}

void Solve( int u , int fa , int mx , int mi , int deep ){
	mx = max( mx , rk[u] );
	mi = min( mi , rk[u] );
	if( vi[mx - 1] - vi[mi - 1] <= D ){
		tque[quelen ++] = Node( mx , mi , deep );
		int id = C - (lower_bound( vi.begin() , vi.begin() + C , vi[mx - 1] - D ) - vi.begin()) , mxret = 0 ;
		while( id ){
			mxret = max( mxret , rbt[id].PrefixMax( vi[mi - 1] + D ) );
			id -= lowbit( id );
		}
		ans = max( ans , mxret + deep + 1 );
	}
	for(auto v : G[u]){
		if( v == fa || del[v] )
			continue;
		Solve( v , u , mx , mi , deep + 1 );
	}
}

void DivideAndCompute(){
	que.push( 1 );
	while( !que.empty() ){
		int x = que.front() ; que.pop();
		vi.clear();
		PreDFS( x );
		sort( vi.begin() , vi.end() );
		C = unique( vi.begin() , vi.end() ) - vi.begin();
		Mi = 1 << 30 ;
		sizeall = sz[x];
		FindRoot( x );
		del[Root] = 1;
		for(auto v : G[Root]){
			if( del[v] )
				continue;
			quelen = 0;
			Solve( v , Root , rk[Root] , rk[Root] , 1 );
			for(int i = 0 ; i < quelen ; ++ i){
				int x = tque[i].x , y = tque[i].y , z = tque[i].z;
				y = C - y + 1;
				while( y <= C ){
					auto it = rbt[y].find( vi[x - 1] );
					if( it == rbt[y].end() || it->second < z )
						rbt[y][vi[x - 1]] = z;
					y += lowbit( y );
				}
			}
			que.push( v );
		}
		for(int i = 1 ; i <= C ; ++ i)
			rbt[i].clear();
	}
}

int main( int argc , char * argv[] ){
	n = read() , D = read();
	for(int i = 1 ; i <= n ; ++ i)
		w[i] = read();
	for(int i = 2 ; i <= n ; ++ i){
		int u = read() , v = read();
		G[u].emplace_back( v );
		G[v].emplace_back( u );
	}
	DivideAndCompute();
	printf( "%d\n" , ans );
	return 0;
}
