#include <cstdio>
#include <algorithm>

using namespace std;

const int maxn = 23;

int n;
int G[maxn];
int f[1 << maxn];
int g[1 << maxn];
int p[1 << maxn];

void dfs(int i, int x)
{
	if (i == n)
	{
		f[x] = 1;
		return;
	}
	dfs(i + 1, x);
	if ((G[i] & x) == 0)
		dfs(i + 1, x | 1 << i);
}

int main()
{
	int m;
	scanf("%d %d", &n, &m);
	while (m--)
	{
		int u, v;
		scanf("%d %d", &u, &v);
		--u;
		--v;
		G[u] |= 1 << v;
		G[v] |= 1 << u;
	}
	dfs(0, 0);
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < 1 << n; ++j)
			if (j >> i & 1)
				f[j] += f[j ^ (1 << i)];
	for (int i = 0; i < 1 << n; ++i)
		g[i] = f[i];
	for (int i = 0; i < 1 << n; ++i)
		p[i] = ((n & 1) ^ __builtin_parity(i)) ? -1 : 1;
	for (int i = 1; ; ++i)
	{
		int t = 0;
		for (int j = 0; j < 1 << n; ++j)
			t += p[j] * f[j];
		if (t)
		{
			printf("%d\n", i);
			break;
		}
		for (int j = 0; j < 1 << n; ++j)
			f[j] *= g[j];
	}
	return 0;
}
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
#include <bits/stdc++.h>

using namespace std;

typedef long long ll;

const int N = 23;

int G[N + 5];

int dp[5][1 << N];

int n, m, p[1 << N];

int c[1 << N], pop[1 << N], U;

int calflow(int x) {
    int *a = dp[x], ret = 0;
    int u = U - 1;
    for(int i = 0; i < U; ++ i) {
        if(pop[u ^ i])
            ret -= c[i] * a[i];
        else
            ret += c[i] * a[i];
    }
    return ret;
}

void overflow() {
    for(int i = 1; i < 5; ++ i)
        for(int j = 0; j < U; ++ j)
            dp[i][j] = dp[i - 1][j] * dp[i - 1][j];
    for(int i = 0; i < U; ++ i)
        c[i] = 1;
    int ans = n, cur = 0;
    for(int i = 4; i >= 0; -- i) {
        if(calflow(i))
            ans = cur | (1 << i);
        else {
            cur |= 1 << i;
            for(int j = 0; j < U; ++ j)
                c[j] *= dp[i][j];
        }
    }
    printf("%d\n", ans);
}

const int mod = 1e9 + 7;

int calmod(int x) {
    int *a = dp[x], ret = 0;
    int u = U - 1;
    for(int i = 0; i < U; ++ i) {
        if(pop[u ^ i])
            ret += mod - (ll)c[i] * a[i] % mod;
        else
            ret += (ll)c[i] * a[i] % mod;
        if(ret >= mod)
            ret -= mod;
    }
    return ret;
}

void usemod() {
    for(int i = 1; i < 5; ++ i)
        for(int j = 0; j < U; ++ j)
            dp[i][j] = (ll)dp[i - 1][j] * dp[i - 1][j] % mod;
    for(int i = 0; i < U; ++ i)
        c[i] = 1;
    int ans = n, cur = 0;
    for(int i = 4; i >= 0; -- i) {
        if(calmod(i))
            ans = cur | (1 << i);
        else {
            cur |= 1 << i;
            for(int j = 0; j < U; ++ j)
                c[j] = (ll)c[j] * dp[i][j] % mod;
        }
    }
    printf("%d\n", ans);
}

void work() {
    scanf("%d%d", &n, &m);
    U = 1 << n;
    for(int i = 0; i < n; ++ i)
        G[i] = 0;
    for(int i = 0; i < m; ++ i) {
        int u, v;
        scanf("%d%d", &u, &v);
        -- u; -- v;
        G[u] |= 1 << v;
        G[v] |= 1 << u;
    }
    dp[0][0] = 1;
    for(int i = 0; i < n; ++ i)
        p[1 << i] = i;
    for(int i = 1; i < U; ++ i) {
        int t = p[i & -i];
        dp[0][i] = dp[0][i ^ (1 << t)] + dp[0][i ^ (G[t] & i) ^ (1 << t)];
        pop[i] = pop[i >> 1] ^ (i & 1);
    }
    overflow();
}

void MAIN(int cas) {
    char infile[100], outfile[100];
    sprintf(infile, "%d.in", cas);
    freopen(infile, "r", stdin);
    sprintf(outfile, "%d.out", cas);
    freopen(outfile, "w", stdout);
    work();
}

int main() {
    work();
    return 0;
}
