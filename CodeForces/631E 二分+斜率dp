//这题与普通的斜率dp稍微有点不同，需要二分斜率，因为后面的点是呈凸包状态。
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <vector>
#include <algorithm>
#include <queue>
#include <cmath>
#include <map>
#define eps 0.0000000001
#define maxn 400009
#define maxm 809
#define inf 0x3f3f3f3f
#define mod 1000000009
#define LL long long
using namespace std;
LL n,a[maxn],ans=-1000000000000000000,suf[maxn],q[maxn];
LL up(int a,int b)
{
    return -suf[a-1]+suf[b-1];
}
LL ua(int a,int b)
{
    return -suf[a]+suf[b];
}
LL down(int a,int b)
{
    return -a+b;
}

bool check1(LL a,LL c)
{
    if(up(q[a],q[a+1])>down(q[a],q[a+1])*c)
        return true;
    else
        return false;
}

bool check2(LL a,LL b,LL c)
{
    if(ua(b,a)<down(b,a)*c)
        return true;
    else
        return false;
}

int main()
{
   //freopen("d:\\in.txt","r",stdin);
    scanf("%lld",&n);
    for(int i=1; i<=n; i++)
        scanf("%lld",&a[i]);
    for(int i=1; i<=n; i++)
        suf[i]=suf[i-1]+a[i];
    LL head=0,tail=0;
    q[tail++]=1;
    for(LL i=2; i<=n; i++)
    {
        //while(head+1<tail&&up(q[head],q[head+1])<down(q[head],q[head+1])*a[i])
        //    head++;
        while(head+1<tail&&up(q[tail-2],q[tail-1])*down(q[tail-1],i)>up(q[tail-1],i)*down(q[tail-2],q[tail-1]))
            tail--;
        q[tail++]=i;
        LL l=head,r=tail-2,rr=head;
        while(l<=r)
        {
            LL mid=(l+r)/2;
            if(check1(mid,a[i]))
                r=mid-1,rr=mid;
            else
                l=mid+1;
        }
        LL u=q[rr],uu=q[rr+1];
        LL pas;
        pas=max(suf[i-1]-suf[u-1]-i*a[i]+u*a[i],suf[i-1]-suf[uu-1]-i*a[i]+uu*a[i]);
        ans=max(ans,pas);
    }
    head=0,tail=0;
    memset(q,0,sizeof(q));
    q[tail++]=n;
    for(LL i=n-1; i>=1; i--)
    {
        //while(head+1<tail&&u(q[head+1],q[head])>down(q[head+1],q[head])*a[i])
        //    head++;
        while(head+1<tail&&ua(i,q[tail-1])*down(q[tail-1],q[tail-2])>ua(q[tail-1],q[tail-2])*down(i,q[tail-1]))
            tail--;
        q[tail++]=i;
        LL l=head,r=tail-2,rr=head;
        while(l<=r)
        {
            LL mid=(l+r)/2;
            if(check2(q[mid],q[mid+1],a[i]))
                r=mid-1,rr=mid;
            else
                l=mid+1;
        }
        LL u=q[rr],uu=q[rr+1];
        LL pas;
        pas=max(suf[i]-suf[u]-i*a[i]+u*a[i],suf[i]-suf[uu]-i*a[i]+uu*a[i]);
        ans=max(ans,pas);
    }
    for(LL i=1; i<=n; i++)
        ans+=a[i]*i;
    printf("%lld\n",ans);
    return 0;
}
